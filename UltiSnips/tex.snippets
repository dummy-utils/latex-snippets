# UltiSnips snippets for LaTeX
#
# Credits: Gilles Castel
# Author: Leonardo Callegari

# <<< GLOBAL PYTHON UTILS <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

global !p

def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def env(name):
	[x, y] = vim.eval("vimtex#env#is_inside('" + name + "')")
	return x != '0' and y != '0'

def create_row_tabstops(count, start=0):
	return ' & '.join([f"${i + 1}" for i in range(start, start + count)])

def create_matrix_tabstops(rows, cols):
	res = ""
	eol = "\\\\\\\\\n"
	for i in range(rows):
		res += f"{create_row_tabstops(cols, i * cols)} {eol}"
	return res.rstrip()

def expand_matrix(snip, rows, cols):
	snip.expand_anon(create_matrix_tabstops(rows, cols))

endglobal

# >>> GLOBAL PYTHON UTILS >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

# === SNIPPETS ============================================================

# <<< DIVIDERS <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

snippet chap "chapter" "not math()" eb
\chapter{${1:${VISUAL}}}
endsnippet

snippet sec "section" "not math()" eb
\section{${1:${VISUAL}}}
endsnippet

snippet sub "subsection" "not math()" eb
\subsection{${1:${VISUAL}}}
endsnippet

snippet ssub "subsubsection" "not math()" eb
\subsubsection{${1:${VISUAL}}}
endsnippet

snippet par "paragraph" "not math()" eb
\paragraph{${1:${VISUAL}}}
endsnippet

# >>> DIVIDERS >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

# <<< MISCELLANEOUS <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

snippet fig "figure" "not math()" eb
\begin{figure}
	\centering
	\includegraphics[scale=${1:1}]{$2}
	\caption{$3}
	\label{fig:${4:$2}}
\end{figure}
endsnippet

snippet beg "begin / end" b
\begin{${1:${VISUAL}}}
	$0
\end{$1}
endsnippet

snippet "(?<!\\)\b(\w*)cmd" "command" r
`!p snip.rv = f"\\{match.group(1)}"`
endsnippet

snippet pac "package" "not env('document')" eb
\usepackage$2{$1}
endsnippet

snippet ref "reference" "not math()" ew
\ref{${1:type}:${2:name}}
endsnippet

snippet cit "cite" "not math()" ew
\cite{${1:${VISUAL}}}
endsnippet

snippet la "label" w
\label{${1:type}:${2:name}}
endsnippet

snippet it "italic" "not math()" ew
\textit{${1:${VISUAL}}}
endsnippet

snippet bb "bold" "not math()" ew
\textbf{${1:${VISUAL}}}
endsnippet

snippet tt "typewriter" "not math()" ew
\texttt{${1:${VISUAL}}}
endsnippet

snippet em "emphasize" "not math()" ew
\emph{${1:${VISUAL}}}
endsnippet

snippet tx "text" "math()" ew
\text{${1:${VISUAL}}}
endsnippet

# >>> MISCELLANEOUS >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

# <<< ENVIRONMENTS <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

snippet item "itemize" "not math()" eb
\begin{itemize}
	\item $0
\end{itemize}
endsnippet

snippet enum "enumerate" "not math()" eb
\begin{enumerate}
	\item $0
\end{enumerate}
endsnippet

snippet itm "item" "env('itemize') or env('enumerate')" Aeb
`!p vim.eval('feedkeys("\<c-f>")')` \item $0
endsnippet

# >>> ENVIRONMENTS >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

# <<< MATH <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

snippet mk "inline math" "not math()" Aew
$$1$
endsnippet

snippet dm "display math" "not math()" Aeb
\[
	$0
\]
endsnippet

snippet eqn "equation" "not math()" eb
\begin{equation}
	$0
\end{equation}
endsnippet

snippet sp "math split" "math()" eb
\begin{split}
	$0
\end{split}
endsnippet

snippet cases "math cases" "math()" eb
\begin{cases}
	$0
\end{cases}
endsnippet

snippet case "case" "env('cases')" eb
$1 & $2 \\\\
endsnippet

snippet "gat([*]?)" "gather" "not math()" ebr
\begin{gather`!p snip.rv = match.group(1)`}
	$0
\end{gather`!p snip.rv = match.group(1)`}
endsnippet

snippet "al([*]?)" "align" "not math()" ebr
\begin{align`!p snip.rv = match.group(1)`}
	$0
\end{align`!p snip.rv = match.group(1)`}
endsnippet

snippet <= "less than or equal" "math()" Aew
\le
endsnippet

snippet >= "greater than or equal" "math()" Aew
\ge
endsnippet

snippet != "not equal" "math()" Aew
\ne
endsnippet

snippet === "equiv" "math()" Aew
\equiv
endsnippet

snippet "(?<!\\)\bpm" "plus minus" "math()" Aer
\pm
endsnippet

snippet "(?<!\\)\bmp" "minus plus" "math()" Aer
\mp
endsnippet

snippet >> "much greater than" "math()" ew
\gg
endsnippet

snippet << "much less than" "math()" ew
\ll
endsnippet

snippet => "implies" "math()" ew
\implies
endsnippet

snippet =< "implied by" "math()" ew
\impliedby
endsnippet

snippet "(?<!\\)\biff" "iff" "math()" Aer
\iff
endsnippet

snippet AA "forall" "math()" Aew
\forall
endsnippet

snippet "(?<!!)\bEE" "exists" "math()" Aer
\exists
endsnippet

snippet !EE "not exists" "math()" Aew
\nexists
endsnippet

snippet -> "to" "math()" Aew
\to
endsnippet

snippet @@ "infty" "math()" Aew
\infty
endsnippet

snippet uu "cup" "math()" Aew
\cup
endsnippet

snippet vv "cap" "math()" Aew
\cap
endsnippet

snippet UU "bigcup" "math()" Aew
\bigcup_{$1}^{$2}
endsnippet

snippet VV "bigcap" "math()" Aew
\bigcap{$1}^{$2}
endsnippet

snippet "([a-zA-Z])vec" "vector symbol" "math()" er
\vec{`!p snip.rv = match.group(1)`}
endsnippet

snippet "([A-Z])cal" "mathcal" "math()" er
\mathcal{`!p snip.rv = match.group(1)`}
endsnippet

snippet "([a-zA-Z])(bar|hat)" "bar/hat" "math()" er
`!p snip.rv = f"\\{match.group(2)}{{{match.group(1)}}}"`
endsnippet

snippet "([a-zA-Z])til(de)?" "tilde" "math()" er
\tilde{`!p snip.rv = match.group(1)`}
endsnippet

snippet "(?<!\\)\bell" "ell" "math()" Aer
\ell
endsnippet

snippet qq "quad" "math()" ew
\quad
endsnippet

priority 10
snippet qqq "qquad" "math()" ew
\qquad
endsnippet
priority 0


snippet "(?<!(\\|!))\bin" "in" "math()" Aer
\in
endsnippet

snippet !in "not in" "math()" Ae
\notin
endsnippet

snippet "(?<!!)cc" "subset" "math()" ewr
\subset
endsnippet

snippet "(?<!!)cc=" "subseteq" "math()" ewr
\subseteq
endsnippet

snippet !cc "not subset" "math()" ew
\not\subset
endsnippet

snippet !cc= "not subseteq" "math()" ew
\not\subseteq
endsnippet

snippet "(?<!!)CC" "supset" "math()" ewr
\supset
endsnippet

snippet "(?<!!)CC=" "supseteq" "math()" ewr
\supseteq
endsnippet

snippet !CC "not supset" "math()" ew
\not\supset
endsnippet

snippet !CC= "not supseteq" "math()" ew
\not\supseteq
endsnippet

snippet s- "set minus" "math()" ew
\smallsetminus
endsnippet

snippet 0set "empty set" "math()" Aew
\varnothing
endsnippet

snippet set "set" "math()" ew
\\{ $1 \\}
endsnippet

snippet ^^^ "ceil" "math()" Aew
\lceil $1 \rceil
endsnippet

snippet ___ "floor" "math()" Aew
\lfloor $1 \rfloor
endsnippet

snippet "\b([ldcv])\." "math dots" "math()" er
`!p snip.rv = f"\\{match.group(1)}dots"`
endsnippet

snippet // "simple frac" "math()" Aew
\frac{$1}{$2}
endsnippet

snippet def= "equals by def" "math()" ew
\overset{\text{\tiny ${1:def}}}{${2:=}}
endsnippet

snippet sum "sum" "math()" Aew
\sum_{$1}^{$2}
endsnippet

snippet prod "prod" "math()" Aew
\prod_{$1}^{$2}
endsnippet

# requires \newcommand{\dx}[1][x]{\,\text{d}#1}
snippet int "int" "math()" Aew
\int_{$1}^{$2} $0 \dx[${3:x}]
endsnippet

snippet lim "lim" "math()" Aew
\lim_{$1}
endsnippet

snippet "(?<!\\)\b(min|max|inf|sup)" "math ops" "math()" Aer
`!p snip.rv = f"\\{match.group(1)}"`
endsnippet

snippet "\b([a-zA-Z])(_|\^)" "subscript & superscript" "math()" Aer
`!p snip.rv = f"{match.group(1) + match.group(2)}{{"`$1`!p snip.rv = f"}}"`
endsnippet

snippet rd "surrounded exponent" "math()" ei
^{($1)}
endsnippet

snippet aa "alpha" "math()" ew
\alpha
endsnippet

snippet bb "beta" "math()" ew
\beta
endsnippet

snippet gg "gamma" "math()" ew
\gamma
endsnippet

snippet GG "Gamma" "math()" ew
\Gamma
endsnippet

snippet dd "delta" "math()" ew
\delta
endsnippet

snippet DD "Delta" "math()" ew
\Delta
endsnippet

snippet ee "epsilon" "math()" ew
\epsilon
endsnippet

snippet varee "varepsilon" "math()" ew
\varepsilon
endsnippet

snippet zz "zeta" "math()" ew
\zeta
endsnippet

snippet hh "eta" "math()" ew
\eta
endsnippet

snippet th "theta" "math()" ew
\theta
endsnippet

snippet TT "Theta" "math()" ew
\Theta
endsnippet

snippet kk "kappa" "math()" ew
\kappa
endsnippet

snippet ll "lambda" "math()" ew
\lambda
endsnippet

snippet LL "Lambda" "math()" ew
\Lambda
endsnippet

snippet pp "pi" "math()" ew
\pi
endsnippet

snippet PP "Pi" "math()" ew
\Pi
endsnippet

snippet rr "rho" "math()" ew
\rho
endsnippet

snippet ss "sigma" "math()" ew
\sigma
endsnippet

snippet SS "Sigma" "math()" ew
\Sigma
endsnippet

snippet oo "omega" "math()" ew
\omega
endsnippet

snippet OO "Omega" "math()" ew
\Omega
endsnippet

snippet vphi "varphi" "math()" ew
\varphi
endsnippet

snippet "(?<!\\)\b(iota|mu|nu|xi|Xi|tau|upsilon|phi|Phi|chi|psi|Psi)" "math()" er
`!p snip.rv = f"\\{match.group(1)}"`
endsnippet

# >>> MATH >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

